# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [ubuntu-latest, macOS-latest]
        build_type: [Debug]
        include:
        # - os: windows-latest
        #   cmake-args: -A x64
        #   package-file: "*-win64.zip"
        - os: ubuntu-latest
          package-file: "*-linux_x86_64.tar.xz"
        - os: macOS-latest
          package-file: "*-macos.dmg"

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get install pkg-config cmake ninja-build libfreetype6-dev libsdl2-dev -y

    - name: Prepare MacOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        brew install pkg-config sdl2 python3 ninja gcc || true
        # --overwrite for:  Target /usr/local/bin/2to3 already exists.
        brew link --overwrite python@3.12
        brew upgrade freetype
        sudo rm -rf /Library/Developer/CommandLineTools

    - name: Configure CMake
      if: contains(matrix.os, 'ubuntu')
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Configure CMake-macos
      if: contains(matrix.os, 'macOS')
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=g++-14
        -DCMAKE_C_COMPILER=gcc-14
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tw_plus_srv-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}
